class Game {
    field Puzzle puzzle;
    field int row, col;

    constructor Game new() {
        return this;
    }

    /** Play a game of sudoku.
     *
     * Draw the main UI of the game, and respond to the user's keypress events.
     *
     * The game will continue running indefinitely until the user quits by
     * pressing the 'q' key.
     */
    method void run() {
        var boolean exit;
        var char key;

        let exit = false;
        do drawBackground();
        do drawCursor();

        while (~exit) {
            // Wait until the user presses down some key ...
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            if ((key = 81) | (key = 113)) { // Q | q
                let exit = true;
            }

            if (key = 131) { do moveUp(); } // up arrow
            if (key = 133) { do moveDown(); } // down arrow
            if (key = 130) { do moveLeft(); } // left arrow
            if (key = 132) { do moveRight(); } // right arrow

            // Wait until the user releases the key ...
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }

            do Sys.wait(4);
        }
        return;
    }

    /** Move the game cursor up one cell, unless already at the top. */
    method void moveUp() {
        if (row > 0) {
            do eraseCursor();
            let row = row - 1;
            do drawCursor();
        }
        return;
    }

    /** Move the game cursor down one cell, unless already at the bottom. */
    method void moveDown() {
        if (row < 8) {
            do eraseCursor();
            let row = row + 1;
            do drawCursor();
        }
        return;
    }

    /** Move the game cursor left one cell, unless already at the left edge. */
    method void moveLeft() {
        if (col > 0) {
            do eraseCursor();
            let col = col - 1;
            do drawCursor();
        }
        return;
    }

    /** Move the game cursor right one cell, unless already at the right edge. */
    method void moveRight() {
        if (col < 8) {
            do eraseCursor();
            let col = col + 1;
            do drawCursor();
        }
        return;
    }

    method void drawBackground() {
        var int i, x, y;

        // Temp: Write out some numbers to help anchor the grid.
        do Output.moveCursor(2, 2);
        do Output.printString("1 2 3 4 5 6 7 8 9");
        do Output.moveCursor(4, 2);
        do Output.printString("2 3 4 5 6 7 8 9 1");
        do Output.moveCursor(6, 2);
        do Output.printString("3 4 5 6 7 8 9 1 2");
        do Output.moveCursor(8, 2);
        do Output.printString("4 5 6 7 8 9 1 2 3");
        do Output.moveCursor(10, 2);
        do Output.printString("5 6 7 8 9 1 2 3 4");
        do Output.moveCursor(12, 2);
        do Output.printString("6 7 8 9 1 2 3 4 5");
        do Output.moveCursor(14, 2);
        do Output.printString("7 8 9 1 2 3 4 5 6");
        do Output.moveCursor(16, 2);
        do Output.printString("8 9 1 2 3 4 5 6 7");
        do Output.moveCursor(18, 2);
        do Output.printString("9 1 2 3 4 5 6 7 8");

        // Draw horizontal grid lines
        let x = 10;
        let y = 16;

        // Double the outer border and the 3x3 sub-grid borders
        do Screen.drawLine(x - 1, y - 1, x + 145, y - 1);
        do Screen.drawLine(x - 1, y + 199, x + 145, y + 199);
        do Screen.drawLine(x, y + 65, x + 144, y + 65);
        do Screen.drawLine(x, y + 131, x + 144, y + 131);

        do Screen.drawLine(x - 1, y - 1, x - 1, y + 199);
        do Screen.drawLine(x + 145, y - 1, x + 145, y + 199);
        do Screen.drawLine(x + 49, y, x + 49, y + 198);
        do Screen.drawLine(x + 97, y, x + 97, y + 198);

        let i = 0;
        while (i < 10) {
            do Screen.drawLine(x, y, x + 144, y);
            let i = i + 1;
            let y = y + 22;
        }

        // Draw vertical grid lines
        let y = 16;
        let i = 0;
        while (i < 10) {
            do Screen.drawLine(x, y, x, y + 198);
            let i = i + 1;
            let x = x + 16;
        }

        return;
    }

    /** Print a character into a game grid cell */
    method void writeCell(int row, int col, char value) {
        do Output.moveCursor(2 + (row * 2), 2 + (col * 2));
        do Output.printChar(value);
        return;
    }

    /** Empty a game grid cell */
    method void clearCell(int row, int col) {
        do writeCell(row, col, 32); // Space
        return;
    }

    /** Draw the game cursor at the current cell position */
    method void drawCursor() {
        var int x, y;
        let x = 12 + (col * 16);
        let y = 18 + (row * 22);
        do Screen.drawLine(x, y, x + 12, y);
        do Screen.drawLine(x, y, x, y + 18);
        do Screen.drawLine(x + 12, y, x + 12, y + 18);
        do Screen.drawLine(x, y + 18, x + 12, y + 18);
        return;
    }

    /** Erase the game cursor at the current cell position */
    method void eraseCursor() {
        var int x, y;
        let x = 12 + (col * 16);
        let y = 18 + (row * 22);
        do Screen.setColor(false);
        do Screen.drawLine(x, y, x + 12, y);
        do Screen.drawLine(x, y, x, y + 18);
        do Screen.drawLine(x + 12, y, x + 12, y + 18);
        do Screen.drawLine(x, y + 18, x + 12, y + 18);
        do Screen.setColor(true);
        return;
    }

    method void dispose() {
        if (~(puzzle = null)) {
            do puzzle.dispose();
            let puzzle = null;
        }
        do Memory.deAlloc(this);
        return;
    }
}
