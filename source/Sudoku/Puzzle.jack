/** A Puzzle object represents an individual Sudoku puzzle. */
class Puzzle {
    field Array solution;
    field Array clues;

    constructor Puzzle new() {
        let solution = Array.new(81);
        let clues = Array.new(81);
        return this;
    }

    /** Load a puzzle from a string representation.
     *
     * The string representation should be a mininum of 162 characters long,
     * and begin with 81 character pair sequences. In each pair of characters,
     * the first character is the ASCII encoding of a digit 1-9, and the second
     * character indicates whether the preceding digit is provided as a clue,
     * or hidden from the user. A space character indicates a hidden value and
     * any other character indicates a clue.
     *
     * These pairs are listed in reading order (left-to-right, top-down).
     *
     * Return the total number of hidden cells in the puzzle.
     */
    method int loadFromString(String input) {
        var int i, j, value, result;
        var boolean hidden;
        while (i < 162) {
            let value = input.charAt(i) - 48; // difference to '0'
            let hidden = (input.charAt(i + 1) = 32); // is space
            let solution[j] = value;
            let clues[j] = ~hidden;
            if (hidden) {
                let result = result + 1;
            }
            let i = i + 2;
            let j = j + 1;
        }
        return result;
    }

    /** Load a predefined puzzle from a numeric ID. */
    method int loadFromId(int id) {
        if (id = 1) {
            return loadFromString(
                "7 3 1 2*4 8 9*6 5*4 6*8 5 9*1*2*7 3 5 9 2 6*3 7 4 1 8*6 8 7 9 1 3*5*4*2 9 4 5 8 7*2 6 3 1 1 2*3*4 5*6 7 8 9*2 1*4 3 6 5 8 9 7 3 5*6 7 8 9 1*2 4 8*7 9 1*2 4*3 5 6 "
            );
        }
        return 0;
    }

    method int getSolution(int index) {
        return solution[index];
    }

    method boolean isClue(int index) {
        return clues[index];
    }

    method void dispose() {
        do solution.dispose();
        do clues.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
